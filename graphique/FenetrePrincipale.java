package graphique;

import ecouteurs.EcouteurGlassPane;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javazoom.jl.player.Player;
import moteur.*;
import reseau.exception.CommandeInvalideException;
import util.Pile;

/**
 *
 * @author Kévin
 */
public class FenetrePrincipale extends javax.swing.JFrame {

	/*
	 * Gestion des elements
	 */
	private boolean tiroirCliquable;
	private boolean tiroirSorti;
	private Timer animationDeplacementTiroir;
	private boolean mouvementTiroir;
	private boolean joueurCliquable;
	private boolean joueurSorti;
	private Timer animationDeplacementJoueur;
	private boolean mouvementJoueur;
	private int remiseEnPlace;
	private Timer chgtJoueur;
	private int incrementImage;
	private boolean lancement;
	/*
	 * Reseau
	 */
	private final String err_message = "ERREUR : Message non envoyé";
	private final String err_commande = "ERREUR : Commande incorrecte";
	private final String err_mp = "ERREUR : Joueur non présent";
	private final String err_game = "ERREUR : Aucune partie en cours";
	private ListeParties listeParties;
	private Style messageGeneral, messagePrive, messagePartie, serveurInfo, partieInfo, serveurErreur;
	/**
	 * Creates new form FuturePetiteFenetre
	 */
	Diabolik diabolik;
	EcouteurGlassPane ecouteur;
	private Player player;
	private boolean musique;
	/*
	 * Configuration
	 */
	boolean deplacementPossible;
	private boolean nouvellePartie;

	public FenetrePrincipale(Diabolik diabolik) {
		this.diabolik = diabolik;
		initComponents();

		jScrollPane1.getVerticalScrollBar().setBlockIncrement(50);
		jScrollPane1.getVerticalScrollBar().setUnitIncrement(20);

		ecouteur = new EcouteurGlassPane(diabolik);
		myGlassPane1.addMouseListener(ecouteur);
		myGlassPane1.addMouseMotionListener(ecouteur);

		initTchat();
		setIconImage(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/icone.png")).getImage());
		setTitle("Diabolik");
		setLocationRelativeTo(getParent());
		setVisible(true);
		setMinimumSize(new Dimension(440, 600));
		setSize(this.getWidth(), this.getWidth() - 200);

		joueurSorti = true;
		joueurCliquable = true;
		tiroirSorti = true;
		tiroirCliquable = true;

		incrementImage = 20;

		deplacementPossible = true;

		lancement = true;

		fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeuCornee.png")));
		chargementBLanc.setVisible(false);
		chargementNoir.setVisible(false);
		surbrillanceFinDuTour.setVisible(false);
	}

	public JLabel getSurbrillanceFinDuTour() {
		return surbrillanceFinDuTour;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finDeTour = new javax.swing.JButton();
        surbrillanceFinDuTour = new javax.swing.JLabel();
        aireDeJeu1 = new graphique.AireDeJeu(diabolik);
        myGlassPane1 = new graphique.MyGlassPane(aireDeJeu1, diabolik);
        fondDeJeu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        regles = new javax.swing.JLabel();
        fondRegles = new javax.swing.JLabel();
        deplacementIcon1 = new javax.swing.JLabel();
        deplacementIcon2 = new javax.swing.JLabel();
        passeIcon = new javax.swing.JLabel();
        suivant = new javax.swing.JLabel();
        precedent = new javax.swing.JLabel();
        astuce = new javax.swing.JLabel();
        miniFlecheTiroir = new javax.swing.JLabel();
        tiroir = new javax.swing.JLabel();
        joueurNoir = new javax.swing.JLabel();
        joueurBlanc = new javax.swing.JLabel();
        miniFlecheJoueur = new javax.swing.JLabel();
        chargementBLanc = new javax.swing.JLabel();
        chargementNoir = new javax.swing.JLabel();
        joueur = new javax.swing.JLabel();
        tchatPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tchatTextPane = new javax.swing.JTextPane();
        tchatTextField = new javax.swing.JTextField();
        envoyerButton = new javax.swing.JButton();
        fondTchat = new javax.swing.JLabel();
        fondBois = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        partieJMenu = new javax.swing.JMenu();
        nouvellePartieJMenuItem = new javax.swing.JMenuItem();
        chargerJMenuItem = new javax.swing.JMenuItem();
        sauvegarderJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        connecterMenuItem = new javax.swing.JMenuItem();
        jouerLigneMenuItem = new javax.swing.JMenuItem();
        quitterPartieReseaujMenuItem = new javax.swing.JMenuItem();
        deconnecterMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        quitterJMenuItem = new javax.swing.JMenuItem();
        editionJMenu = new javax.swing.JMenu();
        annulerJMenuItem = new javax.swing.JMenuItem();
        refaireJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        astuceJMenuItem = new javax.swing.JMenuItem();
        animationsJMenu = new javax.swing.JMenu();
        configurerPartie = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        activerFinDeTourAutoJCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        activerDeplPossibleJCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        sonCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        changerApparenceJMenuItem = new javax.swing.JMenuItem();
        aboutJMenu = new javax.swing.JMenu();
        aproposJMenuItem = new javax.swing.JMenuItem();
        aideJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Diaballik");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(740, 600));
        setName("Diabollik"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        finDeTour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/finDuTour.png"))); // NOI18N
        finDeTour.setBorder(null);
        finDeTour.setBorderPainted(false);
        finDeTour.setContentAreaFilled(false);
        finDeTour.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        finDeTour.setDefaultCapable(false);
        finDeTour.setFocusPainted(false);
        finDeTour.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/finDuTourSurvol.png")));
        finDeTour.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/finDuTourClique.png")));
        finDeTour.setRolloverEnabled(true);
        finDeTour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finDeTourActionPerformed(evt);
            }
        });
        getContentPane().add(finDeTour);
        finDeTour.setBounds(150, 470, 140, 60);

        surbrillanceFinDuTour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/surbrillanceFinDeTour.png"))); // NOI18N
        getContentPane().add(surbrillanceFinDuTour);
        surbrillanceFinDuTour.setBounds(140, 460, 170, 80);

        javax.swing.GroupLayout myGlassPane1Layout = new javax.swing.GroupLayout(myGlassPane1);
        myGlassPane1.setLayout(myGlassPane1Layout);
        myGlassPane1Layout.setHorizontalGroup(
            myGlassPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        myGlassPane1Layout.setVerticalGroup(
            myGlassPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout aireDeJeu1Layout = new javax.swing.GroupLayout(aireDeJeu1);
        aireDeJeu1.setLayout(aireDeJeu1Layout);
        aireDeJeu1Layout.setHorizontalGroup(
            aireDeJeu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myGlassPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        aireDeJeu1Layout.setVerticalGroup(
            aireDeJeu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myGlassPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(aireDeJeu1);
        aireDeJeu1.setBounds(40, 100, 350, 350);

        fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeu.png"))); // NOI18N
        fondDeJeu.setFocusable(false);
        fondDeJeu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fondDeJeuMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fondDeJeuMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fondDeJeuMouseReleased(evt);
            }
        });
        fondDeJeu.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fondDeJeuMouseMoved(evt);
            }
        });
        getContentPane().add(fondDeJeu);
        fondDeJeu.setBounds(20, 0, 410, 560);

        jScrollPane1.setOpaque(false);

        regles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/regles.png"))); // NOI18N
        regles.setFocusable(false);
        regles.setRequestFocusEnabled(false);
        regles.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(regles);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 80, 330, 440);
        jScrollPane1.getViewport().setOpaque(false);

        jScrollPane1.setBorder(null);

        fondRegles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/fondReglesCornee.png"))); // NOI18N
        fondRegles.setVisible(false);
        fondRegles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fondReglesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fondReglesMouseExited(evt);
            }
        });
        fondRegles.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fondReglesMouseMoved(evt);
            }
        });
        getContentPane().add(fondRegles);
        fondRegles.setBounds(20, 0, 400, 560);

        deplacementIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/deplacementBlanc.png"))); // NOI18N
        getContentPane().add(deplacementIcon1);
        deplacementIcon1.setBounds(460, 190, 79, 28);

        deplacementIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/deplacementBlanc.png"))); // NOI18N
        getContentPane().add(deplacementIcon2);
        deplacementIcon2.setBounds(460, 130, 79, 28);

        passeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/passeBlanc.png"))); // NOI18N
        getContentPane().add(passeIcon);
        passeIcon.setBounds(460, 280, 77, 38);

        suivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/suivant.png"))); // NOI18N
        suivant.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        suivant.setEnabled(false);
        suivant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                suivantMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                suivantMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                suivantMouseExited(evt);
            }
        });
        getContentPane().add(suivant);
        suivant.setBounds(530, 30, 70, 50);

        precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedent.png"))); // NOI18N
        precedent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        precedent.setEnabled(false);
        precedent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                precedentMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                precedentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                precedentMouseExited(evt);
            }
        });
        getContentPane().add(precedent);
        precedent.setBounds(406, 30, 70, 50);

        astuce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/astuce.png"))); // NOI18N
        astuce.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        astuce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                astuceMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                astuceMouseExited(evt);
            }
        });
        astuce.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                astuceMouseMoved(evt);
            }
        });
        getContentPane().add(astuce);
        astuce.setBounds(490, 30, 37, 40);

        miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png"))); // NOI18N
        miniFlecheTiroir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(miniFlecheTiroir);
        miniFlecheTiroir.setBounds(600, 170, 20, 20);

        tiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/tiroirPetit.png"))); // NOI18N
        tiroir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tiroirMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tiroirMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tiroirMouseReleased(evt);
            }
        });
        tiroir.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tiroirMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tiroirMouseMoved(evt);
            }
        });
        getContentPane().add(tiroir);
        tiroir.setBounds(380, 10, 252, 350);

        joueurNoir.setFont(new java.awt.Font("URW Chancery L", 1, 24));
        joueurNoir.setText("Humain");
        getContentPane().add(joueurNoir);
        joueurNoir.setBounds(510, 380, 180, 30);

        joueurBlanc.setFont(new java.awt.Font("URW Chancery L", 1, 24));
        joueurBlanc.setText("Humain");
        getContentPane().add(joueurBlanc);
        joueurBlanc.setBounds(510, 410, 180, 40);

        miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png"))); // NOI18N
        miniFlecheJoueur.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(miniFlecheJoueur);
        miniFlecheJoueur.setBounds(700, 400, 20, 20);

        chargementBLanc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/loading4.gif"))); // NOI18N
        getContentPane().add(chargementBLanc);
        chargementBLanc.setBounds(410, 420, 30, 20);

        chargementNoir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/loading4.gif"))); // NOI18N
        getContentPane().add(chargementNoir);
        chargementNoir.setBounds(410, 380, 30, 30);

        joueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/changementJoueur/changement0.png"))); // NOI18N
        joueur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                joueurMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                joueurMouseExited(evt);
            }
        });
        joueur.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                joueurMouseMoved(evt);
            }
        });
        getContentPane().add(joueur);
        joueur.setBounds(390, 360, 340, 110);

        tchatPanel.setOpaque(false);

        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        jScrollPane2.setBorder(null);

        tchatTextPane.setEditable(false);
        tchatTextPane.setOpaque(false);
        tchatTextPane.setBorder(null);
        jScrollPane2.setViewportView(tchatTextPane);

        tchatTextField.setOpaque(false);
        tchatTextField.setBorder(null);
        tchatTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tchatTextFieldCaretUpdate(evt);
            }
        });
        tchatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tchatTextFieldKeyPressed(evt);
            }
        });

        envoyerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/envoyer.png"))); // NOI18N
        envoyerButton.setBorder(null);
        envoyerButton.setBorderPainted(false);
        envoyerButton.setContentAreaFilled(false);
        envoyerButton.setFocusPainted(false);
        envoyerButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/envoyeClique.png"))); // NOI18N
        envoyerButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/envoyerSurvol.png"))); // NOI18N
        envoyerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envoyerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tchatPanelLayout = new javax.swing.GroupLayout(tchatPanel);
        tchatPanel.setLayout(tchatPanelLayout);
        tchatPanelLayout.setHorizontalGroup(
            tchatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tchatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tchatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tchatPanelLayout.createSequentialGroup()
                        .addComponent(tchatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(envoyerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE))
                .addContainerGap())
        );
        tchatPanelLayout.setVerticalGroup(
            tchatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tchatPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tchatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tchatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(envoyerButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(tchatPanel);
        tchatPanel.setBounds(20, 570, 680, 190);

        fondTchat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/fondTchat.png"))); // NOI18N
        getContentPane().add(fondTchat);
        fondTchat.setBounds(0, 550, 710, 250);
        fondTchat.setVisible(false);

        fondBois.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/fond.png"))); // NOI18N
        getContentPane().add(fondBois);
        fondBois.setBounds(0, 0, 740, 810);

        partieJMenu.setText("Partie");

        nouvellePartieJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nouvellePartieJMenuItem.setText("Démarrer une partie");
        nouvellePartieJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouvellePartieJMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(nouvellePartieJMenuItem);

        chargerJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        chargerJMenuItem.setText("Charger une partie");
        chargerJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargerJMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(chargerJMenuItem);

        sauvegarderJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        sauvegarderJMenuItem.setText("Sauvegarder une partie");
        sauvegarderJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegarderJMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(sauvegarderJMenuItem);
        partieJMenu.add(jSeparator1);

        connecterMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        connecterMenuItem.setText("Se connecter à un serveur");
        connecterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connecterMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(connecterMenuItem);

        jouerLigneMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jouerLigneMenuItem.setText("Jouer en ligne");
        jouerLigneMenuItem.setEnabled(false);
        jouerLigneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jouerLigneMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(jouerLigneMenuItem);

        quitterPartieReseaujMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        quitterPartieReseaujMenuItem.setText("Quitter la partie");
        quitterPartieReseaujMenuItem.setEnabled(false);
        quitterPartieReseaujMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterPartieReseaujMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(quitterPartieReseaujMenuItem);

        deconnecterMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        deconnecterMenuItem.setText("Se déconnecter");
        deconnecterMenuItem.setEnabled(false);
        deconnecterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnecterMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(deconnecterMenuItem);
        partieJMenu.add(jSeparator5);

        quitterJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitterJMenuItem.setText("Quitter");
        quitterJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterJMenuItemActionPerformed(evt);
            }
        });
        partieJMenu.add(quitterJMenuItem);

        jMenuBar1.add(partieJMenu);

        editionJMenu.setText("Action");
        editionJMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editionJMenuActionPerformed(evt);
            }
        });

        annulerJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        annulerJMenuItem.setText("Annuler");
        annulerJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerJMenuItemActionPerformed(evt);
            }
        });
        editionJMenu.add(annulerJMenuItem);

        refaireJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        refaireJMenuItem.setText("Refaire");
        refaireJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refaireJMenuItemActionPerformed(evt);
            }
        });
        editionJMenu.add(refaireJMenuItem);
        editionJMenu.add(jSeparator3);

        astuceJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        astuceJMenuItem.setText("Astuce");
        astuceJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                astuceJMenuItemActionPerformed(evt);
            }
        });
        editionJMenu.add(astuceJMenuItem);

        jMenuBar1.add(editionJMenu);

        animationsJMenu.setText("Configuration");

        configurerPartie.setText("Configurer la partie");
        configurerPartie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurerPartieActionPerformed(evt);
            }
        });
        animationsJMenu.add(configurerPartie);
        animationsJMenu.add(jSeparator2);

        activerFinDeTourAutoJCheckBoxMenuItem.setText("Activer la fin de tour automatique");
        activerFinDeTourAutoJCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activerFinDeTourAutoJCheckBoxMenuItemActionPerformed(evt);
            }
        });
        animationsJMenu.add(activerFinDeTourAutoJCheckBoxMenuItem);

        activerDeplPossibleJCheckBoxMenuItem.setSelected(true);
        activerDeplPossibleJCheckBoxMenuItem.setText("Activer les déplacements possibles");
        activerDeplPossibleJCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activerDeplPossibleJCheckBoxMenuItemActionPerformed(evt);
            }
        });
        animationsJMenu.add(activerDeplPossibleJCheckBoxMenuItem);

        sonCheckBoxMenuItem1.setText("Activer la musique");
        sonCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        animationsJMenu.add(sonCheckBoxMenuItem1);
        animationsJMenu.add(jSeparator4);

        changerApparenceJMenuItem.setText("Afficher l'option de l'animation");
        changerApparenceJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changerApparenceJMenuItemActionPerformed(evt);
            }
        });
        animationsJMenu.add(changerApparenceJMenuItem);

        jMenuBar1.add(animationsJMenu);

        aboutJMenu.setText("?");

        aproposJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        aproposJMenuItem.setText("A propos");
        aproposJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aproposJMenuItemActionPerformed(evt);
            }
        });
        aboutJMenu.add(aproposJMenuItem);

        aideJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aideJMenuItem.setText("Aide");
        aideJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aideJMenuItemActionPerformed(evt);
            }
        });
        aboutJMenu.add(aideJMenuItem);

        jMenuBar1.add(aboutJMenu);

        setJMenuBar(jMenuBar1);

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fondDeJeuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondDeJeuMouseClicked
		/*
		 * Un clic en haut à droite permet d'afficher les regles
		 */
		if (evt.getX() >= 385 && evt.getY() >= 365 && evt.getY() <= 455) {
			if (joueurCliquable && !joueurSorti) {
				deplacementJoueur(+1);
				joueurSorti = true;
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			} else if (joueurCliquable) {
				joueurSorti = false;
				deplacementJoueur(-1);
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}

		if (tiroirSorti) {
			if (evt.getX() >= 385 && evt.getY() <= 80 && evt.getY() >= 30) {
				if (precedent.isEnabled()) {
					diabolik.annuler();
				}
			} else if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				if (tiroirCliquable) {
					deplacementTiroir(-1);
					tiroirSorti = false;
					miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
				}
			}
		} else {
			if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				if (tiroirCliquable) {
					deplacementTiroir(+1);
					tiroirSorti = true;
					miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
				}
			}
		}

		if (evt.getX() >= 280 && evt.getX() <= 380 && evt.getY() <= 100 && evt.getY() >= 0) {
			if (evt.getY() <= (evt.getX() - 280)) {
				fondDeJeu.setVisible(false);
				fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeu.png")));
				lancement = false;
				aireDeJeu1.setVisible(false);
				finDeTour.setVisible(false);
				fondRegles.setVisible(true);
				precedent.setEnabled(false);
				suivant.setEnabled(false);
				astuce.setEnabled(false);
			}
		}

    }//GEN-LAST:event_fondDeJeuMouseClicked

    private void fondDeJeuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondDeJeuMouseExited
		if (!lancement) {
			fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeu.png")));
		}
    }//GEN-LAST:event_fondDeJeuMouseExited

    private void fondDeJeuMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondDeJeuMouseMoved
		/*
		 * Coin qui se corne en haut à gauche lors du survol
		 */
		if (evt.getX() >= 280 && evt.getX() <= 380 && evt.getY() <= 100 && evt.getY() >= 0) {
			if (evt.getY() <= (evt.getX() - 280)) {
				fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeuCornee.png")));
				fondDeJeu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
			}
		} else {
			if (!lancement) {
				fondDeJeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/feuilleDeJeu.png")));
			}
			fondDeJeu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		}

		if (tiroirSorti) {
			if (evt.getX() >= 385 && evt.getY() <= 80 && evt.getY() >= 30) {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
				if (precedent.isEnabled()) {
					precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedentSurvol.png")));
				}
			} else if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedent.png")));
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheSurvol.png")));
			} else {
				precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedent.png")));
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			}
		} else {
			if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroiteSurvol.png")));
			} else {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}

		if (joueurSorti) {
			if (evt.getX() >= 385 && evt.getY() >= 365 && evt.getY() <= 455) {
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheSurvol.png")));
			} else {
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			}
		} else {
			if (evt.getX() >= 385 && evt.getY() >= 365 && evt.getY() <= 455) {
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroiteSurvol.png")));
			} else {
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}

    }//GEN-LAST:event_fondDeJeuMouseMoved

    private void fondDeJeuMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondDeJeuMouseDragged
//        if((evt.getX() >= 385 && evt.getX() <= this.getWidth()) && (evt.getY() <= 370 && evt.getY() >= 30)){
//            if(ancien.getX() != 0 && ancien.getY() != 0){
//                if(ancien.getX() > evt.getX()){
//                    if(tiroir.getLocation().getX() >= 210){
//						System.out.println("Ici");
//						deplacementTiroir(-5);
//						if(tiroir.getLocation().getX() <= 210){
//							System.out.println("la");
//						}
//                    }
//                }    
//                else{
//                    if(tiroir.getLocation().getX() <= 380){
//						deplacementTiroir(-(evt.getX()%20) +5);
//						tiroirSortie = true;
//                    }
//                }       
//            }
//            if(ancien.getX() == 0 && ancien.getY() == 0)
//                ancien = evt.getPoint();
//        }
    }//GEN-LAST:event_fondDeJeuMouseDragged

    private void fondDeJeuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondDeJeuMouseReleased
    }//GEN-LAST:event_fondDeJeuMouseReleased

    private void tiroirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiroirMouseClicked
		if (tiroirCliquable && !tiroirSorti) {
			tiroirSorti = true;
			deplacementTiroir(+tiroir.getWidth() - 60);
			miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
		} else if (tiroirCliquable) {
			deplacementTiroir(-tiroir.getWidth() + 60);
			tiroirSorti = false;
			miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
		}
    }//GEN-LAST:event_tiroirMouseClicked

    private void tiroirMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiroirMouseDragged
//		if(ancien.getX() != 0 && ancien.getY() != 0){
//			System.out.println("Ancien "+ancien.getX()+" evtX "+evt.getX());
//            if(ancien.getX() > evt.getX()+10){
//                if(tiroir.getLocation().getX() >= 210){
//					deplacementTiroir(-10);
//                }
//             }    
//            else{
//                if(tiroir.getLocation().getX() <= 380){
//					System.out.println("Je tire");
//					deplacementTiroir(10);
//                }
//            }       
//        }
//        ancien = evt.getPoint();
    }//GEN-LAST:event_tiroirMouseDragged

    private void tiroirMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiroirMouseReleased
    }//GEN-LAST:event_tiroirMouseReleased

    private void tiroirMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiroirMouseMoved
		if (tiroirSorti) {
			miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheSurvol.png")));
		}
    }//GEN-LAST:event_tiroirMouseMoved

    private void tiroirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiroirMouseExited
		if (tiroirSorti) {
			miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
		} else {
			miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
		}
    }//GEN-LAST:event_tiroirMouseExited

    private void fondReglesMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondReglesMouseMoved
		//Pseudo animation du coin ocrnée en haut Ã  gauche
		if (evt.getX() >= 280 && evt.getX() <= 380 && evt.getY() <= 100 && evt.getY() >= 0) {
			if (evt.getY() <= (evt.getX() - 280)) {
				fondRegles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
			}
		} else {
			fondRegles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		}

		if (tiroirSorti) {
			if (evt.getX() >= 385 && evt.getY() <= 80 && evt.getY() >= 30) {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			} else if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheSurvol.png")));
			} else {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			}
		} else {
			if (evt.getX() >= 385 && evt.getY() >= 10 && evt.getY() <= 350) {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroiteSurvol.png")));
			} else {
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}
    }//GEN-LAST:event_fondReglesMouseMoved

    private void fondReglesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondReglesMouseClicked
		if (evt.getX() >= 280 && evt.getX() <= 380 && evt.getY() <= 100 && evt.getY() >= 0) {
			if (evt.getY() <= (evt.getX() - 280)) {
				fondRegles.setVisible(false);
				fondDeJeu.setVisible(true);
				aireDeJeu1.setVisible(true);
				finDeTour.setVisible(true);
				if (!diabolik.getAnnulerPile().isEmpty()) {
					precedent.setEnabled(true);
				}
				if (!diabolik.getRefairePile().isEmpty()) {
					suivant.setEnabled(true);
				}
				if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee())) {
					if(diabolik.getModeDeJeu() != Diabolik.Reseau || (diabolik.getModeDeJeu() == Diabolik.Reseau && diabolik.getClient().getCouleur() == diabolik.getJoueurCourant().getCouleur()))
					activerAstuce(true);
				}
			}
		}
		if (evt.getX() >= 385 && evt.getY() >= 365 && evt.getY() <= 455) {
			if (joueurCliquable && !joueurSorti) {
				deplacementJoueur(+1);
				joueurSorti = true;
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			} else if (joueurCliquable) {
				joueurSorti = false;
				deplacementJoueur(-1);
				miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}

		if (evt.getX() >= 385 && evt.getX() <= 405 && evt.getY() >= 10 && evt.getY() <= 350) {
			if (tiroirCliquable && !tiroirSorti) {
				deplacementTiroir(+tiroir.getWidth() - 60);
				tiroirSorti = true;
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
			} else if (tiroirCliquable) {
				deplacementTiroir(-tiroir.getWidth() + 60);
				tiroirSorti = false;
				miniFlecheTiroir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
			}
		}
    }//GEN-LAST:event_fondReglesMouseClicked

    private void fondReglesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fondReglesMouseExited
		fondRegles.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_fondReglesMouseExited

    private void nouvellePartieJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouvellePartieJMenuItemActionPerformed
		if (diabolik.getModeDeJeu() == Diabolik.OrdivsOrdi) {
			diabolik.shutdown();
		}

		String j = "adverse";
		int confirm = JOptionPane.showConfirmDialog(this,
				"Voulez-vous quitter cette partie et donner la victoire au joueur " + j + "?",
				"Nouvelle partie",
				JOptionPane.YES_NO_OPTION);
		if (confirm == JOptionPane.YES_OPTION) {
			diabolik.nouvellePartie();
		}
    }//GEN-LAST:event_nouvellePartieJMenuItemActionPerformed

    private void chargerJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargerJMenuItemActionPerformed

		JFileChooser fc = new JFileChooser();
		if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File fichier = fc.getSelectedFile();

			if (fichier.exists()) {
				FileInputStream fis = null;
				try {
					fis = new FileInputStream(fichier);
				} catch (FileNotFoundException ex) {
					Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
				}

				if (fis != null) {
					ObjectInputStream ois = null;
					try {
						ois = new ObjectInputStream(fis);
					} catch (IOException ex) {
						Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
					} finally {
						try {
							diabolik.setPlateau((Plateau) ois.readObject());
							diabolik.setJoueur1((Joueur) ois.readObject());
							diabolik.setJoueur2((Joueur) ois.readObject());
							diabolik.setJoueurCourant((Joueur) ois.readObject());
							diabolik.setNbMouvementsRestants(ois.readInt());
							diabolik.setPasseEffectuee(ois.readBoolean());
							diabolik.setAnnulerPile((Pile<moteur.Action>) ois.readObject());
							diabolik.setRefairePile((Pile<moteur.Action>) ois.readObject());
							aireDeJeu1.setPioncourant((Pion) ois.readObject());

							myGlassPane1.setAireDeJeu(aireDeJeu1);
							joueurBlanc.setText(diabolik.getJoueur1().getNom());
							joueurNoir.setText(diabolik.getJoueur2().getNom());
							aireDeJeu1.repaint();
							
							

							if (diabolik.getAnnulerPile().isEmpty()) {
								activerAnnuler(false);
							} else {
								activerAnnuler(true);
							}

							if (diabolik.getRefairePile().isEmpty()) {
								activerRefaire(false);
							} else {
								activerRefaire(true);
							}

							ois.close();
							fis.close();
						} catch (ClassNotFoundException ex) {
							Logger.getLogger(Plateau.class.getName()).log(Level.SEVERE, null, ex);
							Logger.getLogger(Joueur.class.getName()).log(Level.SEVERE, null, ex);
						} catch (IOException ex) {
							Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
				}
			} else {
				System.err.println("Le fichier n'existe pas");
			}
		}
    }//GEN-LAST:event_chargerJMenuItemActionPerformed

    private void sauvegarderJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegarderJMenuItemActionPerformed
		JFileChooser fc = new JFileChooser();
		if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File fichier = fc.getSelectedFile();

			FileOutputStream fos = null;
			try {
				fos = new FileOutputStream(fichier);
			} catch (FileNotFoundException ex) {
				Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
			}

			if (fos != null) {
				ObjectOutputStream oos = null;
				try {
					oos = new ObjectOutputStream(fos);
				} catch (IOException ex) {
					Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
				} finally {
					try {
						oos.writeObject(diabolik.getPlateau());
						oos.writeObject(diabolik.getJoueur1());
						oos.writeObject(diabolik.getJoueur2());
						oos.writeObject(diabolik.getJoueurCourant());
						oos.writeInt(diabolik.getNbMouvementsRestants());
						oos.writeBoolean(diabolik.passeEffectuee());
						oos.writeObject(diabolik.getAnnulerPile());
						oos.writeObject(diabolik.getRefairePile());

						oos.writeObject(aireDeJeu1.getPioncourant());

						oos.close();
						fos.close();
					} catch (IOException ex) {
						Logger.getLogger(Diabolik.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
			}
		}
    }//GEN-LAST:event_sauvegarderJMenuItemActionPerformed

    private void quitterJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterJMenuItemActionPerformed
		quitterApplication();
    }//GEN-LAST:event_quitterJMenuItemActionPerformed

    private void tchatTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tchatTextFieldKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			envoyerMessage();
		}
    }//GEN-LAST:event_tchatTextFieldKeyPressed

    private void tchatTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tchatTextFieldCaretUpdate
		if (tchatTextField.getText().isEmpty()) {
			envoyerButton.setEnabled(false);
		} else {
			envoyerButton.setEnabled(true);
		}
    }//GEN-LAST:event_tchatTextFieldCaretUpdate

    private void envoyerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerButtonActionPerformed
		envoyerMessage();
    }//GEN-LAST:event_envoyerButtonActionPerformed

    private void suivantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suivantMouseClicked
		if (suivant.isEnabled() && !myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice) {
			diabolik.refaire();
			if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
				surbrillanceFinDuTour.setVisible(true);
			} else {
				surbrillanceFinDuTour.setVisible(false);
			}
			if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee())) {
				activerAstuce(true);
			} else {
				activerAstuce(false);
			}
		}
    }//GEN-LAST:event_suivantMouseClicked

    private void suivantMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suivantMouseEntered
		if (suivant.isEnabled()) {
			suivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/suivantSurvol.png")));
		}
    }//GEN-LAST:event_suivantMouseEntered

    private void suivantMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suivantMouseExited
		suivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/suivant.png")));
    }//GEN-LAST:event_suivantMouseExited

    private void precedentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precedentMouseClicked
		if (precedent.isEnabled() && !myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice) {
			diabolik.annuler();
			if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
				surbrillanceFinDuTour.setVisible(true);
			} else {
				surbrillanceFinDuTour.setVisible(false);
			}
			if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee())) {
				activerAstuce(true);
			} else {
				activerAstuce(false);
			}
		}
    }//GEN-LAST:event_precedentMouseClicked

    private void precedentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precedentMouseEntered
		if (precedent.isEnabled()) {
			precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedentSurvol.png")));
		}
    }//GEN-LAST:event_precedentMouseEntered

    private void precedentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precedentMouseExited
		precedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/precedent.png")));
    }//GEN-LAST:event_precedentMouseExited

	private void connecterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connecterMenuItemActionPerformed
		this.setSize(740, this.getHeight());
		new FenetreOptionReseau(diabolik, this);
	}//GEN-LAST:event_connecterMenuItemActionPerformed

        private void aideJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aideJMenuItemActionPerformed
			if (Desktop.isDesktopSupported()) {
				Desktop desktop = Desktop.getDesktop();
				if (desktop.isSupported(Desktop.Action.BROWSE)) {
					URI uri;
					try {
						uri = getClass().getResource("/documentation/index.html").toURI();
						desktop.browse(uri);
					} catch (URISyntaxException ex) {
						Logger.getLogger(FenetrePrincipale.class.getName()).log(Level.SEVERE, null, ex);
					} catch (IOException ex) {
						Logger.getLogger(FenetrePrincipale.class.getName()).log(Level.SEVERE, null, ex);
					}
				} else {
					System.out.println("Votre système ne prend pas en charge BROWSE");
				}
			} else {
				try {
					String tab[] = {"firefox", getClass().getResource("/documentation/index.html").toString()};
					Process test = Runtime.getRuntime().exec(tab);
				} catch (IOException ex) {
					System.out.println("Aide non trouvée");
				}
			}
        }//GEN-LAST:event_aideJMenuItemActionPerformed

	private void editionJMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editionJMenuActionPerformed
		if (precedent.isEnabled() && !myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice) {
			diabolik.annuler();
			if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
				surbrillanceFinDuTour.setVisible(true);
			} else if(!myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice){
				surbrillanceFinDuTour.setVisible(false);
			}
			if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee())) {
				activerAstuce(true);
			} else if(!myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice){
				activerAstuce(false);
			}
		}
	}//GEN-LAST:event_editionJMenuActionPerformed

	private void refaireJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refaireJMenuItemActionPerformed
		if (suivant.isEnabled() && !myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice) {
			diabolik.refaire();
			if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
				surbrillanceFinDuTour.setVisible(true);
			} else if(!myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice){
				surbrillanceFinDuTour.setVisible(false);
			}
			if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee())) {
				activerAstuce(true);
			} else if(!myGlassPane1.enCoursDAnimation && !myGlassPane1.enCoursIndice){
				activerAstuce(false);
			}
		}
	}//GEN-LAST:event_refaireJMenuItemActionPerformed

	private void finDeTourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finDeTourActionPerformed
		if (finDeTour.isEnabled() && !myGlassPane1.enCoursDAnimation) {
			surbrillanceFinDuTour.setVisible(false);
			aireDeJeu1.setPioncourant(null);
			finDeTour.setEnabled(false);
			if (diabolik.getModeDeJeu() == Diabolik.Reseau) {
				diabolik.changementJoueur();
				diabolik.prevenirCoupFini();
			} else {
				Joueur joueurGagnant = diabolik.getJoueurGagnant();
				aireDeJeu1.setPioncourant(null);
				finDeTour.setEnabled(false);
				if (joueurGagnant == null) {
					diabolik.changementJoueur();
					if (diabolik.joueurCourantIA()) {
						Timer t = new Timer(0, new ActionListener() {

							@Override
							public void actionPerformed(ActionEvent e) {
								diabolik.jouerIA();
							}
						});
						t.setInitialDelay(1000);
						t.setRepeats(false);
						t.start();
					}
				}
			}
		}
	}//GEN-LAST:event_finDeTourActionPerformed

	private void joueurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joueurMouseClicked
		if (joueurCliquable && !joueurSorti) {
			joueurSorti = true;
			deplacementJoueur(+joueur.getWidth() - 50);
			miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
		} else if (joueurCliquable) {
			deplacementJoueur(-joueur.getWidth() + 50);
			joueurSorti = false;
			miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
		}
	}//GEN-LAST:event_joueurMouseClicked

		private void aproposJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aproposJMenuItemActionPerformed
			JFrame maFenetre = new JFrame("A Propos");
			maFenetre.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/icone.png")).getImage());
			maFenetre.setBackground(new Color(Integer.parseInt("D7D7D7", 16)));

			JPanel conteneur = new JPanel(new FlowLayout());
			JScrollPane jsp = new JScrollPane(conteneur);
			JEditorPane pan = new JEditorPane();

			maFenetre.setContentPane(jsp);

			String titre;
			String htmlCodeSource = "";


			titre = "<h2>A PROPOS</h2>";
			/*
			 * remplissage code source
			 */
			String htmlHeadBody, corps, fbodyfhtml;
			htmlHeadBody = "<HTML><HEAD><BODY>";
			corps = "";
			fbodyfhtml = "</BODY></HTML>";

			corps += "<p>"
					+ titre
					+ "<p>"
					+ "Licence 3 Informatique" + "<br>"
					+ "Projet fin d'études de l'année 2011-2012" + "<br>"
					+ "Projet: Diaballik" + "<br>"
					+ "Version 1.3 " + "<br><br>"
					+ "CHAPPELLET Kévin" + "<br/>"
					+ "DI SAVINO Rémi" + "<br/>"
					+ "DIREN Asli" + "<br/>"
					+ "DODOLIER Nicolas" + "<br/>"
					+ "GERVAIL Antoine" + "<br/>"
					+ "VERNAGALLO Anthony" + "<br/>"
					+ "";


			htmlCodeSource = htmlHeadBody
					+ corps
					+ fbodyfhtml;

			pan = new JEditorPane("text/html", htmlCodeSource);
			pan.setEditable(false);

			conteneur.add(pan);

			maFenetre.pack();
			maFenetre.setLocationRelativeTo(this);
			maFenetre.setResizable(false);
			maFenetre.setVisible(true);
		}//GEN-LAST:event_aproposJMenuItemActionPerformed

	private void deconnecterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnecterMenuItemActionPerformed
		diabolik.arreterConnexion();
		setModeReseau(false);
	}//GEN-LAST:event_deconnecterMenuItemActionPerformed

	private void jouerLigneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jouerLigneMenuItemActionPerformed
		afficherListeParties();
	}//GEN-LAST:event_jouerLigneMenuItemActionPerformed

	private void annulerJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerJMenuItemActionPerformed
		if (precedent.isEnabled() && !myGlassPane1.enCoursDAnimation) {
			diabolik.annuler();
		}
	}//GEN-LAST:event_annulerJMenuItemActionPerformed

	private void joueurMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joueurMouseExited
		if (joueurSorti) {
			miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFleche.png")));
		} else {
			miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheDroite.png")));
		}
	}//GEN-LAST:event_joueurMouseExited

	private void joueurMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joueurMouseMoved
		if (joueurSorti) {
			miniFlecheJoueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/miniFlecheSurvol.png")));
		}
	}//GEN-LAST:event_joueurMouseMoved
	/**
	 * @param args the command line arguments
	 */
	private void quitterPartieReseaujMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterPartieReseaujMenuItemActionPerformed
		diabolik.getClient().quitterPartieEnCours();
		afficherListeParties();
	}//GEN-LAST:event_quitterPartieReseaujMenuItemActionPerformed

	private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
		if (musique) {
			stop();
		}
	}//GEN-LAST:event_formWindowClosed

	private void astuceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_astuceMouseClicked
		if (astuce.isEnabled() && (diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee()) && !myGlassPane1.enCoursIndice && !myGlassPane1.enCoursDAnimation) {
			diabolik.montrerIndice();
		}
		
	}//GEN-LAST:event_astuceMouseClicked

	private void astuceMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_astuceMouseMoved
		if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee()) && !myGlassPane1.enCoursIndice && !myGlassPane1.enCoursDAnimation) {
			astuce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/astuceSurvol.png")));
		}
	}//GEN-LAST:event_astuceMouseMoved

	private void astuceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_astuceMouseExited
		astuce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/astuce.png")));
	}//GEN-LAST:event_astuceMouseExited

	private void changerApparenceJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changerApparenceJMenuItemActionPerformed
		new OptionsAffichage(this, myGlassPane1);
	}//GEN-LAST:event_changerApparenceJMenuItemActionPerformed

	private void sonCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonCheckBoxMenuItem1ActionPerformed
		if (sonCheckBoxMenuItem1.isSelected() == true) {
			musique();
		} else {
			stop();
		}
	}//GEN-LAST:event_sonCheckBoxMenuItem1ActionPerformed

	private void activerDeplPossibleJCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activerDeplPossibleJCheckBoxMenuItemActionPerformed
		deplacementPossible = !deplacementPossible;
	}//GEN-LAST:event_activerDeplPossibleJCheckBoxMenuItemActionPerformed

	private void activerFinDeTourAutoJCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activerFinDeTourAutoJCheckBoxMenuItemActionPerformed
		if (activerFinDeTourAutoJCheckBoxMenuItem.isSelected()) {
			diabolik.setFinDeTourAutomatique(true);
		} else {
			diabolik.setFinDeTourAutomatique(false);
		}
	}//GEN-LAST:event_activerFinDeTourAutoJCheckBoxMenuItemActionPerformed

	private void configurerPartieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurerPartieActionPerformed
		new OptionDePartie(diabolik, this);
	}//GEN-LAST:event_configurerPartieActionPerformed

	private void astuceJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_astuceJMenuItemActionPerformed
		if ((diabolik.getNbMouvementsRestants() > 0 || !diabolik.passeEffectuee()) && !myGlassPane1.enCoursIndice && !myGlassPane1.enCoursDAnimation) {
			diabolik.montrerIndice();
		}
	}//GEN-LAST:event_astuceJMenuItemActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		quitterApplication();
	}//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutJMenu;
    private javax.swing.JCheckBoxMenuItem activerDeplPossibleJCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem activerFinDeTourAutoJCheckBoxMenuItem;
    private javax.swing.JMenuItem aideJMenuItem;
    private graphique.AireDeJeu aireDeJeu1;
    private javax.swing.JMenu animationsJMenu;
    private javax.swing.JMenuItem annulerJMenuItem;
    private javax.swing.JMenuItem aproposJMenuItem;
    private javax.swing.JLabel astuce;
    private javax.swing.JMenuItem astuceJMenuItem;
    private javax.swing.JMenuItem changerApparenceJMenuItem;
    private javax.swing.JLabel chargementBLanc;
    private javax.swing.JLabel chargementNoir;
    private javax.swing.JMenuItem chargerJMenuItem;
    private javax.swing.JMenuItem configurerPartie;
    private javax.swing.JMenuItem connecterMenuItem;
    private javax.swing.JMenuItem deconnecterMenuItem;
    private javax.swing.JLabel deplacementIcon1;
    private javax.swing.JLabel deplacementIcon2;
    private javax.swing.JMenu editionJMenu;
    private javax.swing.JButton envoyerButton;
    private javax.swing.JButton finDeTour;
    private javax.swing.JLabel fondBois;
    private javax.swing.JLabel fondDeJeu;
    private javax.swing.JLabel fondRegles;
    private javax.swing.JLabel fondTchat;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenuItem jouerLigneMenuItem;
    private javax.swing.JLabel joueur;
    private javax.swing.JLabel joueurBlanc;
    private javax.swing.JLabel joueurNoir;
    private javax.swing.JLabel miniFlecheJoueur;
    private javax.swing.JLabel miniFlecheTiroir;
    private graphique.MyGlassPane myGlassPane1;
    private javax.swing.JMenuItem nouvellePartieJMenuItem;
    private javax.swing.JMenu partieJMenu;
    private javax.swing.JLabel passeIcon;
    private javax.swing.JLabel precedent;
    private javax.swing.JMenuItem quitterJMenuItem;
    private javax.swing.JMenuItem quitterPartieReseaujMenuItem;
    private javax.swing.JMenuItem refaireJMenuItem;
    private javax.swing.JLabel regles;
    private javax.swing.JMenuItem sauvegarderJMenuItem;
    private javax.swing.JCheckBoxMenuItem sonCheckBoxMenuItem1;
    private javax.swing.JLabel suivant;
    private javax.swing.JLabel surbrillanceFinDuTour;
    private javax.swing.JPanel tchatPanel;
    private javax.swing.JTextField tchatTextField;
    private javax.swing.JTextPane tchatTextPane;
    private javax.swing.JLabel tiroir;
    // End of variables declaration//GEN-END:variables

	/*
	 *
	 * Gestion des elements
	 *
	 */
	private void deplacementTiroir(int deplacement) {
		mouvementTiroir = false;
		tiroirCliquable = false;

		if (deplacement < 0) {
			remiseEnPlace = -2;
		} else {
			remiseEnPlace = 2;
		}



		if (deplacement < 0) {
			animationDeplacementTiroir = new javax.swing.Timer(30, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (tiroir.getX() > 190) {
						mouvementTiroir = true;
						tiroirSorti = false;
						bougerTiroir(-10);
					} else if (mouvementTiroir) {
						tiroirCliquable = true;
						bougerTiroir(remiseEnPlace);
						animationDeplacementTiroir.stop();
						if (diabolik.getModeDeJeu() != Diabolik.Reseau && !tiroirSorti && !joueurSorti) {
							setSize(440, getHeight());
						}
					}
				}
			});
		} else {
			if (diabolik.getModeDeJeu() != Diabolik.Reseau && !tiroirSorti && !joueurSorti) {
				setSize(740, getHeight());
			}

			animationDeplacementTiroir = new javax.swing.Timer(30, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (tiroir.getX() < 370) {
						mouvementTiroir = true;
						tiroirSorti = true;
						bougerTiroir(10);
					} else if (mouvementTiroir) {
						tiroirCliquable = true;
						bougerTiroir(remiseEnPlace);
						animationDeplacementTiroir.stop();
					}
				}
			});
		}

		animationDeplacementTiroir.start();
	}

	private void bougerTiroir(int glissement) {
		deplacementIcon1.setLocation(deplacementIcon1.getX() + glissement, deplacementIcon1.getY());
		deplacementIcon2.setLocation(deplacementIcon2.getX() + glissement, deplacementIcon2.getY());
		passeIcon.setLocation(passeIcon.getX() + glissement, passeIcon.getY());
		astuce.setLocation(astuce.getX() + glissement, astuce.getY());
		precedent.setLocation(precedent.getX() + glissement, precedent.getY());
		suivant.setLocation(suivant.getX() + glissement, suivant.getY());
		miniFlecheTiroir.setLocation(miniFlecheTiroir.getX() + glissement, miniFlecheTiroir.getY());
		tiroir.setLocation(tiroir.getX() + glissement, tiroir.getY());
	}

	private void deplacementJoueur(int deplacement) {
		mouvementJoueur = false;
		joueurCliquable = false;

		if (deplacement < 0) {
			animationDeplacementJoueur = new javax.swing.Timer(30, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (joueur.getX() > 100) {
						mouvementJoueur = true;
						joueurSorti = false;
						bougerJoueur(-10);
					} else if (mouvementJoueur) {
						joueurCliquable = true;
						animationDeplacementJoueur.stop();
						if (diabolik.getModeDeJeu() != Diabolik.Reseau && !tiroirSorti && !joueurSorti) {
							setSize(440, getHeight());
						}
					}
				}
			});
		} else {

			if (diabolik.getModeDeJeu() != Diabolik.Reseau && !tiroirSorti && !joueurSorti) {
				setSize(740, getHeight());
			}
			animationDeplacementJoueur = new javax.swing.Timer(30, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (joueur.getX() < 390) {
						mouvementJoueur = true;
						joueurSorti = true;
						bougerJoueur(10);
					} else if (mouvementJoueur) {
						joueurCliquable = true;
						animationDeplacementJoueur.stop();

					}
				}
			});
		}
		animationDeplacementJoueur.start();
	}

	private void bougerJoueur(int deplacement) {
		joueur.setLocation(joueur.getX() + deplacement, joueur.getY());
		joueurBlanc.setLocation(joueurBlanc.getX() + deplacement, joueurBlanc.getY());
		joueurNoir.setLocation(joueurNoir.getX() + deplacement, joueurNoir.getY());
		miniFlecheJoueur.setLocation(miniFlecheJoueur.getX() + deplacement, miniFlecheJoueur.getY());
		chargementBLanc.setLocation(chargementBLanc.getX() + deplacement, chargementBLanc.getY());
		chargementNoir.setLocation(chargementNoir.getX() + deplacement, chargementNoir.getY());
	}

	private void quitterApplication() {
		int confirm = JOptionPane.showConfirmDialog(this,
				"Voulez-vous vraiment quitter le jeu ?",
				"Quitter",
				JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {
			System.exit(0);
		}
	}
	/*
	 *
	 * Gestion des images
	 *
	 */

	public void setNouvellePartie(boolean nouvellePartie) {
		this.nouvellePartie = nouvellePartie;
	}

	public void changementJoueurImage() {
		String j;
		deplacementIcon1.setEnabled(true);
		deplacementIcon2.setEnabled(true);
		passeIcon.setEnabled(true);

		if (diabolik.getJoueurCourant().getCouleur() == Pion.BLANC) {
			j = "Blanc";
		} else {
			j = "Noir";
		}
		if (nouvellePartie) {
			incrementImage = 0;
			surbrillanceFinDuTour.setVisible(false);
			joueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/changementJoueur/changement" + incrementImage + ".png")));
			if (diabolik.getJoueurCourant() instanceof JoueurIA || diabolik.getModeDeJeu() == Diabolik.Reseau && diabolik.getClient().getCouleur() == Pion.NOIR) {
				chargementBLanc.setVisible(true);
			}
			nouvellePartie = false;
		} else {
			chgtJoueur = new javax.swing.Timer(10, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (diabolik.getJoueurCourant().getCouleur() == Pion.NOIR && incrementImage < 19) {
						chargementBLanc.setVisible(false);
						incrementImage++;
						joueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/changementJoueur/changement" + incrementImage + ".png")));
						if (diabolik.getJoueurCourant() instanceof JoueurIA || diabolik.getModeDeJeu() == Diabolik.Reseau && diabolik.getClient().getCouleur() == Pion.BLANC) {
							chargementNoir.setVisible(true);
						}
					} else if (diabolik.getJoueurCourant().getCouleur() == Pion.BLANC && incrementImage > 0) {
						chargementNoir.setVisible(false);
						incrementImage--;
						joueur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/changementJoueur/changement" + incrementImage + ".png")));
						if (diabolik.getJoueurCourant() instanceof JoueurIA || diabolik.getModeDeJeu() == Diabolik.Reseau && diabolik.getClient().getCouleur() == Pion.NOIR) {
							chargementBLanc.setVisible(true);
						}
					} else {
						chgtJoueur.stop();
					}
				}
			});
			chgtJoueur.start();
		}

		if (diabolik.getJoueurCourant() instanceof JoueurIA) {
			astuce.setEnabled(false);
			astuceJMenuItem.setEnabled(false);
			precedent.setEnabled(false);
			annulerJMenuItem.setEnabled(false);
			refaireJMenuItem.setEnabled(false);
			suivant.setEnabled(false);
		} else if(diabolik.getModeDeJeu() != Diabolik.Reseau) {
			activerAstuce(true);
			if (!diabolik.getAnnulerPile().isEmpty()) {
				annulerJMenuItem.setEnabled(true);
				precedent.setEnabled(true);
			}
			if (!diabolik.getRefairePile().isEmpty()) {
				refaireJMenuItem.setEnabled(true);
				suivant.setEnabled(true);
			}
		}
		deplacementIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/deplacement" + j + ".png")));
		deplacementIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/deplacement" + j + ".png")));
		passeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphique/images/secondeVersion/passe" + j + ".png")));
	}

	public void setImageMouvement(int nbMouvementsRestants) {
		switch (nbMouvementsRestants) {
			case 0:
				deplacementIcon1.setEnabled(false);
				deplacementIcon2.setEnabled(false);
				break;
			case 1:
				deplacementIcon1.setEnabled(true);
				deplacementIcon2.setEnabled(false);
				break;
			case 2:
				deplacementIcon1.setEnabled(true);
				deplacementIcon2.setEnabled(true);
				break;
		}
		if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
			activerAstuce(false);
		}
		if (diabolik.getNbMouvementsRestants() == 0 && diabolik.isPasseEffectuee()) {
			surbrillanceFinDuTour.setVisible(true);
		}
	}

	public void setImagePasse(boolean b) {
		passeIcon.setEnabled(b);

		if (diabolik.getNbMouvementsRestants() == 0 && diabolik.passeEffectuee()) {
			activerAstuce(false);
		}
		if (diabolik.getNbMouvementsRestants() == 0 && diabolik.isPasseEffectuee()) {
			surbrillanceFinDuTour.setVisible(true);
		}
	}

	/*
	 *
	 * Reseau
	 *
	 */
	public void afficherMessage(String message, String pseudo) {
		//TODO parser le message pour afficher les smileys
		ecrireTchat(pseudo + " dit : " + message, messageGeneral);
	}

	public void afficherInformation(String info) {
		ecrireTchat(info, serveurInfo);
	}

	public void afficherMessagePrive(String message, String pseudo) {
		ecrireTchat(pseudo + " vous dit : " + message, messagePrive);
	}

	public void afficherMessagePriveAccuse(String message, String pseudo) {
		ecrireTchat("Vous dites à " + pseudo + " : " + message, messagePrive);
	}

	public void afficherInformationPartie(String info) {
		ecrireTchat(info, partieInfo);
	}

	public void afficherMessagePartie(String message, String pseudo) {
		ecrireTchat(pseudo + " dit : " + message, messagePartie);
	}

	public void setModeReseau(boolean b) {

		activerGlassPane(!b);
		afficherTchat(b);

		nouvellePartieJMenuItem.setEnabled(!b);
		chargerJMenuItem.setEnabled(!b);
		sauvegarderJMenuItem.setEnabled(!b);

		configurerPartie.setEnabled(!b);

		connecterMenuItem.setEnabled(!b);
		jouerLigneMenuItem.setEnabled(b);
		deconnecterMenuItem.setEnabled(b);

		if (!b) {
			quitterPartieReseaujMenuItem.setEnabled(false);
			tchatTextField.setText(null);
			tchatTextPane.setText(null);
			if (listeParties != null) {
				listeParties.dispose();
			}
			listeParties = null;
			diabolik.retourAncienMode();
			diabolik.nouvellePartie();
		} else {
			activerAstuce(false);
			listeParties = new ListeParties(diabolik, this);
		}
	}

	public void setPartieEnCours(boolean b) {
		quitterPartieReseaujMenuItem.setEnabled(b);

		activerAstuce(false);

		chargementBLanc.setVisible(false);
		chargementNoir.setVisible(false);

	}

	private void afficherTchat(boolean b) {
		tchatPanel.setVisible(b);
		fondTchat.setVisible(b);
		setSize(getWidth(), b ? getHeight() + 250 : getHeight() - 250);
	}

	public void afficherListeParties() {
		listeParties.setVisible(true);
	}

	private void envoyerMessage() {
		if (!tchatTextField.getText().isEmpty()) {
			try {
				if (!traitementCommande(tchatTextField.getText())) {
					diabolik.envoyerMessageGeneral(tchatTextField.getText());
				}
				tchatTextField.setText(null);
			} catch (CommandeInvalideException ex) {
				ecrireTchat(err_commande, serveurErreur);
			} catch (RemoteException ex) {
				ecrireTchat(err_message, serveurErreur);
			} catch (NullPointerException ex) {
				ecrireTchat(err_message, serveurErreur);
			}
		}
	}

	private boolean traitementCommande(String text) throws CommandeInvalideException, RemoteException {
		if (text.startsWith("/mp ")) // commande: /mp <pseudo> <message>
		{
			if (text.length() < 7) {
				throw new CommandeInvalideException();
			}

			int finPseudo = text.indexOf(' ', 4);
			if (finPseudo < 0) // pas de second espace
			{
				throw new CommandeInvalideException();
			}

			String pseudo = text.substring(4, finPseudo).trim();

			if (!pseudo.isEmpty()) {
				if (text.length() < finPseudo + 2) // pas de message
				{
					throw new CommandeInvalideException();
				}
				if (!diabolik.envoyerMessagePrive(text.substring(finPseudo + 1), pseudo)) {
					ecrireTchat(err_mp, serveurErreur);
				}
				return true;
			} else {
				throw new CommandeInvalideException();
			}
		} else if (text.startsWith("/game ")) {
			if (text.length() < 7) {
				throw new CommandeInvalideException();
			}
			if (diabolik.getClient().getPartie() != null) {
				diabolik.getClient().getPartie().envoyerMessage(text.substring(6), diabolik.getClient().getId());
			} else {
				ecrireTchat(err_game, serveurErreur);
			}
			return true;
		} else {
			return false;
		}
	}

	private void initTchat() {
		tchatPanel.setVisible(false);

		messageGeneral = tchatTextPane.getStyle("default");

		messagePrive = tchatTextPane.addStyle("messagePrive", messageGeneral);
		StyleConstants.setBold(messagePrive, true);

		messagePartie = tchatTextPane.addStyle("messagePartie", messageGeneral);
		StyleConstants.setForeground(messagePartie, Color.BLUE);

		serveurInfo = tchatTextPane.addStyle("serveurInfo", messageGeneral);
		StyleConstants.setItalic(serveurInfo, true);
		StyleConstants.setForeground(serveurInfo, new Color(0, 153, 0));

		partieInfo = tchatTextPane.addStyle("partieInfo", serveurInfo);
		StyleConstants.setBold(partieInfo, true);

		serveurErreur = tchatTextPane.addStyle("serveurErreur", serveurInfo);
		StyleConstants.setForeground(serveurErreur, Color.RED);
	}

	private void ecrireTchat(String texte, Style style) {
		try {
			tchatTextPane.getDocument().insertString(tchatTextPane.getDocument().getLength(), texte + "\n", style);
			tchatTextPane.setCaretPosition(tchatTextPane.getDocument().getLength());
		} catch (BadLocationException ex) {
			Logger.getLogger(FenetrePrincipale.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	synchronized public void activerGlassPane(boolean b) {

		myGlassPane1.removeMouseListener(ecouteur);
		myGlassPane1.removeMouseMotionListener(ecouteur);

		if (b) {
			myGlassPane1.addMouseListener(ecouteur);
			myGlassPane1.addMouseMotionListener(ecouteur);
		}
	}

	public void afficherPartieGagnee(boolean b) {
		String message;
		if (b) {
			message = "Vous avez gagné !";
		} else {
			message = "Vous avez perdu !";
			try {
				Thread.sleep(4000);
			} catch (InterruptedException ex) {
				Logger.getLogger(FenetrePrincipale.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		myGlassPane1.animFinPartie(diabolik.getPlateau());
		JOptionPane.showMessageDialog(this, message, "Fin de partie", JOptionPane.PLAIN_MESSAGE);
		myGlassPane1.stopAnimFinPartie(false);
		activerGlassPane(false);
		
		afficherListeParties();
	}

	public void afficherAdversairePerdu() {
		JOptionPane.showMessageDialog(this, "Votre adversaire a quitté la partie", "Fin de partie", JOptionPane.ERROR_MESSAGE);
		activerGlassPane(false);
		afficherListeParties();
	}

	/*
	 *
	 * Gestion Annuler/Refaire
	 *
	 */
	public void activerRefaire(boolean b) {
		suivant.setEnabled(b);
		refaireJMenuItem.setEnabled(b);
	}

	public void activerAnnuler(boolean b) {
		precedent.setEnabled(b);
		annulerJMenuItem.setEnabled(b);
	}

	public JLabel getPasse() {
		return passeIcon;
	}

	public void setPasse(JLabel passe) {
		this.passeIcon = passe;
	}

	public JLabel getPrecedent() {
		return precedent;
	}

	public void setPrecedent(JLabel precedent) {
		this.precedent = precedent;
	}

	public JLabel getSuivant() {
		return suivant;
	}

	public void setSuivant(JLabel suivant) {
		this.suivant = suivant;
	}

	public void activerAstuce(boolean b) {
		astuce.setEnabled(b);
		astuceJMenuItem.setEnabled(b);
	}

	public void repaintAireDeJeu() {
		aireDeJeu1.repaint();
	}

	public void setTextJoueurBlanc(String message) {
		joueurBlanc.setText(message);
	}

	public void setTextJoueurNoir(String message) {
		joueurNoir.setText(message);
	}

	public void afficherFin(String message) {
		activerGlassPane(false);
		myGlassPane1.animFinPartie(diabolik.getPlateau());
		int confirm = JOptionPane.showConfirmDialog(this,
				message + " a gagné la partie.\nRecommencer une nouvelle partie ?",
				"Fin de partie",
				JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {
			myGlassPane1.stopAnimFinPartie(false);
			Timer t = new Timer(0, new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						diabolik.nouvellePartie();
					}
				});
				t.setRepeats(false);
				t.start();
			
			
		}
		if (confirm == JOptionPane.NO_OPTION) {
			myGlassPane1.stopAnimFinPartie(true);			
		} else {
			activerGlassPane(false);
		}

	}
	/*
	 *
	 * Getter and Setter
	 *
	 */

	public JButton getFinDeTour() {
		return finDeTour;
	}

	public void setFinDeTour(JButton finDeTour) {
		this.finDeTour = finDeTour;
	}

	public AireDeJeu getAireDeJeu() {
		return aireDeJeu1;
	}

	public MyGlassPane getMyGlassPane1() {
		return myGlassPane1;
	}

	public EcouteurGlassPane getEcouteur() {
		return ecouteur;
	}

	public boolean isDeplacementPossible() {
		return deplacementPossible;
	}

	public void animer(Coup coup) {
		myGlassPane1.logobi(coup, diabolik.getPlateau());
	}

	public void animer(moteur.Action action) {
		myGlassPane1.logobi(action, diabolik.getPlateau());
	}

	public void animerAnnuler(moteur.Action action) {
		myGlassPane1.logobiAnnuler(action, diabolik.getPlateau());
	}

	public void musique() {
		musique = true;
		Random rand = new Random();
		int i = rand.nextInt(2);
		initMusique(i);
		// run in new thread to play in background
		new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					Random rand = new Random();
					int i = rand.nextInt(2);
					while (musique) {
						player.play();
						if (musique) {
							player.close();
							i = (i + 1) % 2;
							initMusique(i);
						}
					}
					player.close();
				} catch (Exception e) {
					System.out.println(e);
				}
			}
		}).start();
	}

	public void stop() {
		musique = false;
		player.close();
	}

	public void initMusique(int num) {
		ArrayList<String> listeMusique = new ArrayList<String>();
		listeMusique.add("/graphique/musique/fuji.mp3");
		listeMusique.add("/graphique/musique/springdance.mp3");

		try {
			BufferedInputStream bis = new BufferedInputStream(getClass().getResourceAsStream(listeMusique.get(num)));//new BufferedInputStream(fis);
			player = new Player(bis);
		} catch (Exception e) {
			System.out.println("Problem playing file " + listeMusique.get(num));
			System.out.println(e);
		}
	}

	public JLabel getAstuce() {
		return astuce;
	}

	public JLabel getDeplacementIcon1() {
		return deplacementIcon1;
	}

	public JLabel getDeplacementIcon2() {
		return deplacementIcon2;
	}
	
	
}

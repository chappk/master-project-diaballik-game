package graphique;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.rmi.RemoteException;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import moteur.Diabolik;
import reseau.exception.PartieException;
import util.Couple;

/**
 *
 * @author vernagaa
 */
public class ListeParties extends javax.swing.JDialog {

	public static final String err_partie_pleine = "La partie est déjà pleine";
	public static final String err_partie_dispo = "La partie n'est plus disponible";
	public static final String err_partie_deja_connecte = "Vous êtes déjà connecté à cette partie";
	public static final String err_connexion = "Erreur de communication avec le serveur";
	
	private static final String msg_aucune_partie = "Aucune partie trouvée";
	
	private Diabolik diabolik;
	private boolean listeVide;
	
	public ListeParties(Diabolik d, javax.swing.JFrame parent) {
		super(parent, false);
		diabolik = d;
		
		initComponents();
		
//		actualiserParties();
		
		// on ferme la boite de dialogue avec appui sur ESC
        AbstractAction act = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                putValue(ACTION_COMMAND_KEY, "actionCommand"); // pas sûr que ce soit utile
                setVisible(false);
            }
        };
        getRootPane().getActionMap().put("esc_quit", act);
        InputMap im = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "esc_quit");
		
		setLocationRelativeTo(parent);
//        setVisible(true);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        partiesListe = new javax.swing.JList();
        annulerButton = new javax.swing.JButton();
        rejoindreButton = new javax.swing.JButton();
        creerButton = new javax.swing.JButton();
        actualiserButton = new javax.swing.JButton();

        setTitle("Parties disponibles");

        partiesListe.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        partiesListe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                partiesListeMouseClicked(evt);
            }
        });
        partiesListe.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                partiesListeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(partiesListe);

        annulerButton.setText("Annuler");
        annulerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerButtonActionPerformed(evt);
            }
        });

        rejoindreButton.setText("Rejoindre");
        rejoindreButton.setEnabled(false);
        rejoindreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejoindreButtonActionPerformed(evt);
            }
        });

        creerButton.setText("Créer");
        creerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creerButtonActionPerformed(evt);
            }
        });

        actualiserButton.setText("Actualiser");
        actualiserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualiserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(creerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rejoindreButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(annulerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(actualiserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualiserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annulerButton)
                    .addComponent(rejoindreButton)
                    .addComponent(creerButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void rejoindreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejoindreButtonActionPerformed
		rejoindre();
	}//GEN-LAST:event_rejoindreButtonActionPerformed

	private void creerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerButtonActionPerformed
		new CreerPartieReseauConfirm(diabolik, this);
	}//GEN-LAST:event_creerButtonActionPerformed

	private void annulerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerButtonActionPerformed
		setVisible(false);
	}//GEN-LAST:event_annulerButtonActionPerformed

	private void actualiserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualiserButtonActionPerformed
		actualiserParties();
	}//GEN-LAST:event_actualiserButtonActionPerformed

	private void partiesListeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_partiesListeValueChanged
		if(!listeVide && !partiesListe.isSelectionEmpty()) {
			rejoindreButton.setEnabled(true);
		}
	}//GEN-LAST:event_partiesListeValueChanged

	private void partiesListeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_partiesListeMouseClicked
		if (evt.getClickCount() == 2)
			rejoindre();
	}//GEN-LAST:event_partiesListeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualiserButton;
    private javax.swing.JButton annulerButton;
    private javax.swing.JButton creerButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList partiesListe;
    private javax.swing.JButton rejoindreButton;
    // End of variables declaration//GEN-END:variables

	private void actualiserParties() {
		try {
			Couple<Integer, String>[] liste = diabolik.getParties();
			if(liste.length == 0) {
				partiesListe.setListData(new String[]{msg_aucune_partie});
				listeVide = true;
			}
			else {
				partiesListe.setListData(liste);
				listeVide = false;
			}
			rejoindreButton.setEnabled(false);
		} catch (RemoteException ex) {
			JOptionPane.showMessageDialog(this, err_connexion, "Erreur", JOptionPane.ERROR_MESSAGE);
		}
	}

	@Override
	public void setVisible(boolean b) {
		super.setVisible(b);
		if(b)
			actualiserParties();
	}

	private void rejoindre() {
		if(!partiesListe.isSelectionEmpty()) {
			int confirm = JOptionPane.OK_OPTION;
			
			if(diabolik.getClient().getPartie() != null) {
			confirm = JOptionPane.showConfirmDialog(this,
					"Vous allez être déconnecté de la partie actuelle",
					"Rejoindre une partie",
					JOptionPane.OK_CANCEL_OPTION,
					JOptionPane.WARNING_MESSAGE);
			}
			
			if (confirm == JOptionPane.OK_OPTION) {
				try {
					diabolik.rejoindrePartie(((Couple<Integer, String>) partiesListe.getSelectedValue()).getKey());
					diabolik.partieEnCours(true);
					setVisible(false);
				} catch (PartieException ex) {
					JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
					actualiserParties();
				} catch (RemoteException ex) {
					JOptionPane.showMessageDialog(this, err_connexion, "Erreur", JOptionPane.ERROR_MESSAGE);
				} catch (ClassCastException ex) {
				}
			}
		}
	}
	
}
